#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>

#define BLOCK_SIZE 1024
#define LANE_SIZE 64
#define NUM_LANES (BLOCK_SIZE / LANE_SIZE)
uint64_t state_matrix[NUM_LANES];
void initialize_state() {
    for (int i = 0; i < NUM_LANES; i++) {
        state_matrix[i] = (i < (NUM_LANES / 2)) ? rand() | 1 : 0; 
    }
}
int count_zero_lanes() {
    int count = 0;
    for (int i = NUM_LANES / 2; i < NUM_LANES; i++) {
        if (state_matrix[i] == 0) count++;
    }
    return count;
}
void simulate_sha3_diffusion() {
    int rounds = 0;
    clock_t start_time = clock();
    while (count_zero_lanes() > 0) {
        for (int i = NUM_LANES / 2; i < NUM_LANES; i++) {
            state_matrix[i] ^= rand(); 
        }
        rounds++;
    }
    clock_t end_time = clock();
    double elapsed_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;
    printf("All zero lanes have been filled after %d rounds (Time elapsed: %.6f seconds)\n", rounds, elapsed_time);
}

int main() {
    srand(time(NULL));
    initialize_state();
    simulate_sha3_diffusion();
    return 0;
}
